Design and implement a class called Cat, which represents a cat climbing a vertical utility pole. The cat can only climb for one unit of distance at a time. The direction in which it is climbing can be either up or down. The cat can decide to change direction (i.e., if it was climbing up, then it will now be climbing down; and vice-versa). Cat requires a toString method to return both the current position and the direction climbing to the driver so it can be output. No set or get methods are required for this question.

For your design, create a UML Class diagram similar to Figure 5.5 on page 180 of the textbook. Note that you need to include the constructor in the methods section if you code a constructor.

Hints: Remember that a positive vertical number line has a zero position at the bottom with numbers increasing positive as you move up. Obviously, a cat cannot climb below 0, or it would be digging under the ground.

Write an interactive test driver that instantiates a Cat, then allows the user to manipulate it with simple commands like Output (to see the position and direction), Climb, Reverse, Exit ... single letters work just fine. All output must be via the driver not methods within Cat. You should use this driver to create screenshot exhibits for a number of scenarios (e.g. output original state, climb a few times, output, climb a few more times, output, reverse, output, climb, output, reverse, output, etc.).

(Ignore the text box below, your submission can be uploaded to the final question)


----------



The Die class presented in Listing 5.2 of the textbook models a standard cubic die with faces 1 through 6. It is also possible to have regular dice with 4 sides (tetrahedron), 8 sides (octahedron), 12 sides (dodecahedron), and 20 sides (icosahedron).

Modify the Die class so that it can be used to simulate any of the five possible regular dice. The class requires the following methods and/or modifications:

A constructor with no parameters that creates a default 6-sided die.

A constructor with one parameter that indicates how many faces the die is to have. Check that it is one of the permitted values, otherwise default to a 6-sided die.

The roll() method given needs to be modified to work within the number of faces established by the constructors.

The setFaceValue() method needs to have logic added to ensure the new incoming face value is within the allowable limits for the number of faces.

A second get_ method that retrieves the textual name of the current face value, such as One, Two, Three, etc. Note that a single method is expected that will work with any of the five regular dice.

The toString() method should return both the numeric value and textual name for the current face value in a form like “1 : One”.

For your design, create a UML Class diagram similar to Figure 5.5 on page 180 of the textbook. Note that you need to include the constructors in the methods section.

Write a test driver that exercises this class as follows:

Instantiates a 6-sided die using the default constructor, then outputs the results of 12 rolls.

Create one of each of the five regular dice using the second constructor. For each, output the results from a number of rolls that is double the number of faces created (i.e., 8 rolls for 4 faces, 12 rolls for 6 faces, etc.)

Attempt to create a die with an illegal number of faces then output the results of 10 rolls.